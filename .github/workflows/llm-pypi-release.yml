name: LLM Pypi Release

# Cancel previous runs in the PR when you push new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/llm-pypi-release.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for release whl'
        required: true
        type: string
      upload:
        description: 'True to upload to pypi'
        required: true
        type: boolean
  workflow_call:
    inputs:
      version:
        description: 'Version for release whl'
        required: true
        type: string
      upload:
        description: 'True to upload to pypi'
        required: true
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linux-build-avx2:
    runs-on: [ self-hosted, AVX2, centos7 ]
    steps:
      - name: Set access token
        run: |
          echo "github_access_token=${GITHUB_ACCESS_TOKEN}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
        with:
          repository: 'intel-analytics/llm.cpp'
          token: ${{ env.github_access_token }}
      - name: Install Build Environment
        shell: bash
        run: |
          yum update -y
          yum install -y centos-release-scl
          yum install -y devtoolset-11
          yum install -y sshpass netcat
      - name: Build binary
        shell: bash
        run: |
          scl enable devtoolset-11 'make'
      - name: Move release binary
        shell: bash
        run: |
          mkdir release
          mv build/main-bloom release/main-bloom_avx2
          mv build/quantize-bloom release/quantize-bloom_avx2
          mv build/libbloom.so release/libbloom_avx2.so
          mv build/main-llama release/main-llama_avx2
          mv build/quantize-llama release/quantize-llama_avx2
          mv build/libllama.so release/libllama_avx2.so
          mv build/main-gptneox release/main-gptneox_avx2
          mv build/quantize-gptneox release/quantize-gptneox_avx2
          mv build/libgptneox.so release/libgptneox_avx2.so
          mv build/main-starcoder release/main-starcoder_avx2
          mv build/quantize-starcoder release/quantize-starcoder_avx2
          mv build/libstarcoder.so release/libstarcoder_avx2.so
      - name: Archive build files
        uses: actions/upload-artifact@v3
        with:
          name: linux-avx2
          path: |
            release
      - name: Clean up test environment
        shell: bash
        run: |
          make clean

  linux-build-avx512:
    runs-on: [ self-hosted, AVX512, centos7 ]
    steps:
      - name: Set access token
        run: |
          echo "github_access_token=${GITHUB_ACCESS_TOKEN}" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
        with:
          repository: 'intel-analytics/llm.cpp'
          token: ${{ env.github_access_token }}
      - name: Install Build Environment
        shell: bash
        run: |
          yum update -y
          yum install -y centos-release-scl
          yum install -y devtoolset-11
          yum install -y sshpass netcat
      - name: Build binary
        shell: bash
        run: |
          scl enable devtoolset-11 'make'
      - name: Move release binary
        shell: bash
        run: |
          mkdir release
          mv build/main-bloom release/main-bloom_avx512
          mv build/quantize-bloom release/quantize-bloom_avx512
          mv build/libbloom.so release/libbloom_avx512.so
          mv build/main-llama release/main-llama_avx512
          mv build/quantize-llama release/quantize-llama_avx512
          mv build/libllama.so release/libllama_avx512.so
          mv build/main-gptneox release/main-gptneox_avx512
          mv build/quantize-gptneox release/quantize-gptneox_avx512
          mv build/libgptneox.so release/libgptneox_avx512.so
          mv build/main-starcoder release/main-starcoder_avx512
          mv build/quantize-starcoder release/quantize-starcoder_avx512
          mv build/libstarcoder.so release/libstarcoder_avx512.so
      - name: Archive build files
        uses: actions/upload-artifact@v3
        with:
          name: linux-avx512
          path: |
            release
      - name: Clean up test environment
        shell: bash
        run: |
          make clean

  windows-build-avx2:
    runs-on: [ self-hosted, Windows ]
    steps:
      - name: Set access token
        run: |
          echo "github_access_token=$env:GITHUB_ACCESS_TOKEN" >> $env:GITHUB_ENV
          echo "github_access_token=$env:GITHUB_ACCESS_TOKEN"
      - uses: actions/checkout@v3
        with:
          repository: 'intel-analytics/llm.cpp'
          token: ${{ env.github_access_token }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64
      - name: Add cmake to PATH
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build binary
        shell: powershell
        run: |
          cmake .
          cmake --build . --config Release
      - name: Archive build files
        uses: actions/upload-artifact@v3
        with:
          name: windows-avx2
          path: |
            build/Release

  release-pypi:
    needs: [linux-build-avx2, linux-build-avx512, windows-build-avx2]
    steps:
      - uses: actions/checkout@v3
      - name: Download all build files
        uses: actions/download-artifact@v3
      - name: Move build resources
        shell: bash
        run: |
          rm -rf python/llm/llm-binary || true
          mkdir python/llm/llm-binary
          mv linux-avx2/* python/llm/llm-binary/
          mv linux-avx512/* python/llm/llm-binary/
          mv windows-avx2/* python/llm/llm-binary/
          rm -rf linux-avx2
          rm -rf linux-avx512
          rm -rf windows-avx2
      - name: Linux release
        shell: bash
        run: |
          BIGDL_DIR="$(pwd)"
          echo $BIGDL_DIR
          LLM_SCRIPT_DIR="$(cd ${BIGDL_DIR}/python/llm/dev; pwd)"
          echo $LLM_SCRIPT_DIR
          bash ${LLM_SCRIPT_DIR}/release_default_linux.sh ${{ inputs.version }} ${{ inputs.upload }}
          bash ${LLM_SCRIPT_DIR}/release_default_windows.sh ${{ inputs.version }} ${{ inputs.upload }}
